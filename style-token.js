/* eslint-disable no-console */
const StyleDictionaryPackage = require("style-dictionary");
const global = require("./styles/tokens/global.json");
const light = require("./styles/tokens/light.json");
const dark = require("./styles/tokens/dark.json");
const all = require("./styles/tokens/all.json");

/**
 * Custom format that generate javascript dictionnary containing all the theme values
 */
StyleDictionaryPackage.registerFormat({
  name: "fast/design-tokens-values",
  formatter({ dictionary }) {
    return (
      "/* DO NOT EDIT THIS FILE ! */\n" +
      "/* This file has been generated by the pipeline*/\n" +
      "export const theme = " +
      `{\n${dictionary.allProperties
        .map((token) => `\t${token.name}: "${token.value}"`)
        .join(",\n")}\n}`
    );
  },
});

/**
 * Custom format that generate file with all the design tokens
 */
StyleDictionaryPackage.registerFormat({
  name: "fast/design-tokens",
  formatter({ dictionary }) {
    return (
      "/* DO NOT EDIT THIS FILE ! */\n" +
      "/* This file has been generated by the pipeline*/\n\n" +
      "import { DesignToken } from '@microsoft/fast-foundation';\n\n" +
      "const { create } = DesignToken;\n\n" +
      `${dictionary.allProperties
        .map(
          (token) =>
            `export const ${token.name} = create<string>('${token.name}');`
        )
        .join("\n")}\n`
    );
  },
});

// HAVE THE STYLE DICTIONARY CONFIG DYNAMICALLY GENERATED
function getStyleDictionaryConfig(tokensConfig = {}) {
  const { brand, tokens } = tokensConfig;

  return {
    tokens,
    platforms: {
      web: {
        transformGroup: "web",
        prefix: "fpsfa",
        buildPath: "./styles/",
        files: [
          {
            destination: `design-tokens/${brand}-theme.js`,
            format: "fast/design-tokens-values",
          },
        ],
        transforms: ["name/cti/camel"],
      },
    },
  };
}

console.log("Build started...");

const configs = [
  {
    brand: "global",
    tokens: global,
  },
  {
    brand: "dark",
    tokens: dark,
  },
  {
    brand: "light",
    tokens: light,
  },
];

configs.map((config) => {
  console.log("\n==============================================");
  console.log(`\nProcessing:  [Web] [${config.brand}]`);

  const StyleDictionary = StyleDictionaryPackage.extend(
    getStyleDictionaryConfig(config)
  );
  StyleDictionary.buildPlatform("web");

  console.log("\nEnd processing");
});

console.log(`\nProcessing:  [DesignToken]`);

const StyleDictionary = StyleDictionaryPackage.extend({
  tokens: all,
  platforms: {
    web: {
      transformGroup: "web",
      prefix: "fpsfa",
      buildPath: "./styles/",
      files: [
        {
          destination: `design-tokens/design-token.js`,
          format: "fast/design-tokens",
        },
      ],
      transforms: ["name/cti/camel"],
    },
  },
});
StyleDictionary.buildPlatform("web");

console.log("\nEnd processing");

console.log("\n==============================================");
console.log("\nBuild completed!");
